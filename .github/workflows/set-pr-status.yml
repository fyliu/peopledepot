name: Add PR to Project and Set Status

on:
  pull_request:
    types: [opened, reopened, ready_for_review]

jobs:
  add-to-project:
    runs-on: ubuntu-latest
    steps:
      - name: Add PR to project and set status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const prefix = process.env.STATUS_PREFIX || "PR Needs Review";
            const projectId = process.env.PROJECT_ID;  // set in repo/org secrets
            const excludePattern = process.env.EXCLUDE_STATUS_REGEX || "automated column";
            const excludeRe = new RegExp(excludePattern, "i");
            const prId = context.payload.pull_request.node_id;

            core.info(`üîé Matching status prefix (case-insensitive): "${prefix}"`);
            core.info(`üö´ Excluding statuses matching: /${excludePattern}/i`);

            // 1) (Idempotently) add PR to project; fall back to finding existing item if it already exists
            let itemId = null;
            const addMutation = `
              mutation($projectId: ID!, $prId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $prId }) {
                  item { id }
                }
              }
            `;
            try {
              const addRes = await github.graphql(addMutation, { projectId, prId });
              itemId = addRes.addProjectV2ItemById.item.id;
              core.info(`‚úÖ PR added to project with item ID ${itemId}`);
            } catch (e) {
              const msg = String(e);
              if (/already exists/i.test(msg) || /content.*already.*in.*project/i.test(msg)) {
                core.info("‚ÑπÔ∏è PR already in project. Locating existing project item...");
              } else {
                core.warning(`‚ö†Ô∏è addProjectV2ItemById failed: ${msg}`);
              }
            }

            if (!itemId) {
              // Find the item id by scanning PR's project items for this project
              const findItemQuery = `
                query($prId: ID!) {
                  node(id: $prId) {
                    ... on PullRequest {
                      projectItems(first: 50) {
                        nodes {
                          id
                          project { id title }
                        }
                      }
                    }
                  }
                }
              `;
              const r = await github.graphql(findItemQuery, { prId });
              const items = r.node?.projectItems?.nodes ?? [];
              const match = items.find(n => n.project?.id === projectId);
              if (!match) {
                core.setFailed("‚ùå Could not determine project item ID for this PR.");
                return;
              }
              itemId = match.id;
              core.info(`üîÅ Found existing project item ID ${itemId}`);
            }

            // 2) Get project fields + name
            const fieldsQuery = `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    title
                    fields(first: 100) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options { id name }
                        }
                      }
                    }
                  }
                }
              }
            `;
            const { node: project } = await github.graphql(fieldsQuery, { projectId });
            core.info(`üéØ Project: ${project.title}`);

            // 3) Find the "Status" field
            const statusField = (project.fields.nodes || []).find(f => f?.name === "Status");
            if (!statusField) {
              core.setFailed("‚ùå No 'Status' field found in the project.");
              return;
            }

            // 4) Choose a status option:
            //    - name starts with prefix (case-insensitive)
            //    - and does NOT match exclude regex
            const prefixLower = prefix.toLowerCase();
            const allOptions = statusField.options || [];
            const candidates = allOptions
              .filter(o => typeof o?.name === "string")
              .filter(o => o.name.toLowerCase().startsWith(prefixLower))
              .filter(o => !excludeRe.test(o.name));

            if (!candidates.length) {
              core.warning(`‚ö†Ô∏è No status option starting with "${prefix}" (case-insensitive) after excluding /${excludePattern}/i.`);
              core.info("üìã All available 'Status' options:");
              for (const o of allOptions) core.info(`- ${o.name}`);
              // Not failing the job; just exiting to avoid setting a wrong status.
              return;
            }

            // Prefer the shortest name (e.g., "PR Needs Review" over "PR Needs Review - Something")
            candidates.sort((a, b) => a.name.length - b.name.length || a.name.localeCompare(b.name));
            const chosen = candidates[0];

            core.info("‚úÖ Matching candidates (after exclusions):");
            for (const c of candidates) core.info(`- ${c.name}`);
            core.info(`üèÅ Chosen status: "${chosen.name}" (id: ${chosen.id})`);

            // 5) Set PR Status
            const updateMutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $optionId }
                  }
                ) {
                  projectV2Item { id }
                }
              }
            `;
            await github.graphql(updateMutation, {
              projectId,
              itemId,
              fieldId: statusField.id,
              optionId: chosen.id
            });

            core.info(`üéâ Set PR status to "${chosen.name}"`);
        env:
          PROJECT_ID: "PVT_kwHOABGzqc4A5zkE"   # your project node ID
          STATUS_PREFIX: "PR Needs Review"      # case-insensitive prefix
          EXCLUDE_STATUS_REGEX: "automated column"  # case-insensitive regex to skip automated columns
