name: Set PR Status

on:
  pull_request:
    types:
      - opened
      - reopened
      - submitted

jobs:
  set-status:
    runs-on: ubuntu-latest
    steps:
      - name: Set status to "Needs Review"
        uses: actions/github-script@v6
        with:
          script: |

const repo = context.repo.repo;
const pullRequestNumber = context.payload.pull_request.number;

// The field name and value you want to set
const projectFieldName = "Status";
const projectFieldValue = "PR Needs review (automated column, do not place items here manually)";

// Step 1: Find the project and item ID for the PR
const pr = await github.rest.pulls.get({
  owner,
  repo,
  pull_number: pullRequestNumber,
});
const prNodeId = pr.data.node_id;

// Step 2: Find the project item for this PR (requires GraphQL query)
const query = `
  query($prId: ID!) {
    node(id: $prId) {
      ... on PullRequest {
        projectItems(first: 10) {
          nodes {
            id
            project {
              id
              title
            }
            fieldValues(first: 10) {
              nodes {
                field {
                  name
                  id
                }
                value
              }
            }
          }
        }
      }
    }
  }
`;
const result = await github.graphql(query, { prId: prNodeId });
const item = result.node.projectItems.nodes.find(i => i.project.title === "YOUR_PROJECT_NAME");
if (!item) {
  throw new Error("PR is not in the project. You may need to automate addition first.");
}

// Step 3: Find the field ID for "Status"
const statusField = item.fieldValues.nodes.find(fv => fv.field.name === projectFieldName);
if (!statusField) {
  throw new Error(`No field named "${projectFieldName}" found.`);
}

// Step 4: Update the Status field for the item
const mutation = `
  mutation($itemId: ID!, $fieldId: ID!, $value: String!) {
    updateProjectV2ItemFieldValue(
      input: {
        projectId: "${item.project.id}",
        itemId: $itemId,
        fieldId: $fieldId,
        value: { text: $value }
      }
    ) {
      projectV2Item {
        id
      }
    }
  }
`;
await github.graphql(mutation, {
  itemId: item.id,
  fieldId: statusField.field.id,
  value: projectFieldValue,
});

console.log(`PR #${pullRequestNumber} status set to "${projectFieldValue}"`);
