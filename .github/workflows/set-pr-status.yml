name: Set PR Status After Board Assignment

on:
  pull_request:
    types: [opened, reopened, ready_for_review]

jobs:
  set-status:
    runs-on: ubuntu-latest
    steps:
      - name: Wait until PR is added to a project
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const prefix = process.env.STATUS_PREFIX || "PR Needs Review";
            const prNodeId = context.payload.pull_request.node_id;

            const query = `
              query($prId: ID!) {
                node(id: $prId) {
                  ... on PullRequest {
                    projectItems(first: 10) {
                      nodes {
                        id
                        project {
                          id
                          title
                          fields(first: 50) {
                            nodes {
                              ... on ProjectV2SingleSelectField {
                                id
                                name
                                options { id name }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            // Poll up to 5 minutes
            let projectItems = [];
            for (let i = 0; i < 60; i++) {
              const { node } = await github.graphql(query, { prId: prNodeId });
              projectItems = node.projectItems.nodes;
              if (projectItems.length > 0) {
                core.info(`✅ PR has been added to ${projectItems.length} project(s)`);
                break;
              }
              core.info("⌛ Waiting for board automation...");
              await new Promise(r => setTimeout(r, 5000));
            }

            if (projectItems.length === 0) {
              core.warning("⚠️ PR was never added to a project (timeout)");
              return;
            }

            // Update all projects
            for (const item of projectItems) {
              const statusField = item.project.fields.nodes.find(f => f.name === "Status");
              if (!statusField) {
                core.warning(`⚠️ No Status field found in project "${item.project.title}"`);
                continue;
              }

              // Look for an option starting with "PR Needs Review"
              const option = statusField.options.find(o => o.name.startsWith(prefix));
              if (!option) {
                core.warning(`⚠️ No status option starting with "${prefix}" in project "${item.project.title}"`);
                continue;
              }

              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { singleSelectOptionId: $optionId }
                    }
                  ) {
                    projectV2Item { id }
                  }
                }
              `;

              await github.graphql(mutation, {
                projectId: item.project.id,
                itemId: item.id,
                fieldId: statusField.id,
                optionId: option.id
              });

              core.info(`✅ Set status in "${item.project.title}" to "${option.name}"`);
            }
        env:
          STATUS_PREFIX: "PR Needs Review"
