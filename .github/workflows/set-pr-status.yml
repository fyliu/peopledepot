name: Set PR Status

on:
  pull_request:
    types: [opened, reopened, ready_for_review]

jobs:
  set-status:
    runs-on: ubuntu-latest
    steps:
      - name: Set PR Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const desiredStatus = "${{ inputs.status || 'Needs Review' }}";
            const prNodeId = context.payload.pull_request.node_id;

            // 1. Get project items and their fields
            const query = `
              query($prId: ID!) {
                node(id: $prId) {
                  ... on PullRequest {
                    projectItems(first: 10) {
                      nodes {
                        id
                        project {
                          id
                          title
                          fields(first: 20) {
                            nodes {
                              ... on ProjectV2SingleSelectField {
                                id
                                name
                                options {
                                  id
                                  name
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const { node } = await github.graphql(query, { prId: prNodeId });

            if (!node.projectItems.nodes.length) {
              core.warning("PR is not in any project, skipping");
              return;
            }

            for (const item of node.projectItems.nodes) {
              const statusField = item.project.fields.nodes.find(f => f.name === "Status");
              if (!statusField) {
                core.warning(`No "Status" field found in project ${item.project.title}`);
                continue;
              }

              const option = statusField.options.find(o => o.name === desiredStatus);
              if (!option) {
                core.warning(`No "${desiredStatus}" option in project ${item.project.title}`);
                continue;
              }

              // 2. Update to the requested status
              const mutation = `
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { singleSelectOptionId: $optionId }
                    }
                  ) {
                    projectV2Item { id }
                  }
                }
              `;

              await github.graphql(mutation, {
                projectId: item.project.id,
                itemId: item.id,
                fieldId: statusField.id,
                optionId: option.id
              });

              core.info(`Updated PR status in project "${item.project.title}" to "${desiredStatus}"`);
            }
        env:
          STATUS: PR Needs review (automated column, do not place items here manually)
