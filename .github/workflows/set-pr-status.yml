name: Set PR Status After Board Assignment

on:
  projects_v2_item:
    types: [created]

jobs:
  set-status:
    runs-on: ubuntu-latest
    if: ${{ github.event.projects_v2_item.content_type == 'PullRequest' }}
    steps:
      - name: Set PR Status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
          script: |
            const desiredStatus = process.env.STATUS || "Needs Review";
            const itemId = context.payload.projects_v2_item.node_id;
            const projectId = context.payload.projects_v2_item.project_node_id;

            // 1. Look up the Status field + option
            const fieldsQuery = `
              query($projectId: ID!) {
                node(id: $projectId) {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options { id name }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const { node: project } = await github.graphql(fieldsQuery, { projectId });

            const statusField = project.fields.nodes.find(f => f.name === "Status");
            if (!statusField) {
              core.warning("No Status field found in project");
              return;
            }

            const option = statusField.options.find(o => o.name === desiredStatus);
            if (!option) {
              core.warning(`No "${desiredStatus}" option exists in project`);
              return;
            }

            // 2. Update status
            const mutation = `
              mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                updateProjectV2ItemFieldValue(
                  input: {
                    projectId: $projectId
                    itemId: $itemId
                    fieldId: $fieldId
                    value: { singleSelectOptionId: $optionId }
                  }
                ) {
                  projectV2Item { id }
                }
              }
            `;

            await github.graphql(mutation, {
              projectId,
              itemId,
              fieldId: statusField.id,
              optionId: option.id
            });

            core.info(`âœ… Updated PR status in project to "${desiredStatus}"`);
        env:
          STATUS: PR Needs review (automated column, do not place items here manually)
